// backend/prisma/schema.prisma

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int              @id @default(autoincrement())
  firstName            String?          @map("first_name")
  lastName             String?          @map("last_name")
  email                String
  auth0ID              String           @map("auth0_id")
  userFeatures         HomeFeature[]
  savedFeatures        SavedFeature[]
  initiatedConnections UserConnection[] @relation("initatingUser")
  acceptedConnections  UserConnection[] @relation("acceptingUser")
}

model HomeFeature {
  id             Int            @id @default(autoincrement())
  feature        String
  // numberOf       Int?           @map("number_of")
  type           FeatureType    @default(STANDARD)
  userId         Int?
  user           User?          @relation(fields: [userId], references: [id])
  featureRatings SavedFeature[]

  @@map("home_features")
}

model SavedFeature {
  id        Int         @id @default(autoincrement())
  userId    Int
  user      User        @relation(fields: [userId], references: [id])
  featureId Int
  rating    Rating?
  feature   HomeFeature @relation(fields: [featureId], references: [id])

  @@map("saved_features")
}

model UserConnection {
  id              Int  @id @default(autoincrement())
  initiatingUser  User @relation(fields: [initatingUserId], references: [id], name: "initatingUser")
  initatingUserId Int
  acceptingUser   User @relation(fields: [acceptingUserId], references: [id], name: "acceptingUser")
  acceptingUserId Int

  @@map("user_connections")
}

enum FeatureType {
  STANDARD
  ADVANCED
  CUSTOM
}

enum Rating {
  NOT_ESSENTIAL
  NICE_BONUS
  FAIRLY_IMPORTANT
  VERY_DESIRABLE
  NON_NEGOTIABLE
}
